var Device = React.createClass({
  rawMarkup: function() {
    var rawMarkup = marked(this.props.children.toString(), {sanitize: true});
    return { __html: rawMarkup };
  },

  render: function() {
    return (
      <div className="device">
        <h2 className="deviceId">
          {this.props.name}
        </h2>
        <span dangerouslySetInnerHTML={this.rawMarkup()} />
      </div>
    );
  }
});

var DeviceBox = React.createClass({
  loadDevicesFromServer: function() {
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      cache: false,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  handleDeviceSubmit: function(device) {
    var devices = this.state.data;
    // Optimistically set an id on the new device. It will be replaced by an
    // id generated by the server. In a production application you would likely
    // not use Date.now() for this and would have a more robust system in place.
    device.id = Date.now();
    var newDevices = devices.concat([device]);
    this.setState({data: newDevices});
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      type: 'GET',
      data: device,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        this.setState({data: devices});
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  getInitialState: function() {
    return {data: []};
  },
  componentDidMount: function() {
    this.loadDevicesFromServer();
  },
  render: function() {
    return (
      <div className="deviceBox">
        <h1>Devices</h1>
        <DeviceList data={this.state.data} />
      </div>
    );
  }
});

var DeviceList = React.createClass({
  render: function() {
    var devices = this.props.data.map(function(device) {
      return(
        <Device room={device["device_file"]} key={device["id"]} id={device["id"]} name={device["name"]}>
            {device["id"]}
            {device["name"]}
        </Device>
      );
    });
    return (
      <div className="deviceList">
        {devices}
      </div>
    );
  }
});


ReactDOM.render(
  <DeviceBox url="/api/devices" />,
  document.getElementById('content')
);
